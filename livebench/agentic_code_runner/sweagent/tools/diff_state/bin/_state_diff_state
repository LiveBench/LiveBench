#!/usr/bin/env python3

def _ensure_venv_in_gitignore(repo_root: str) -> None:
    """Ensure .venv is present in .gitignore file."""
    from pathlib import Path
    
    gitignore_path = Path(repo_root) / ".gitignore"
    
    # Read existing .gitignore content or create empty if it doesn't exist
    if gitignore_path.exists():
        content = gitignore_path.read_text()
        lines = content.splitlines()
    else:
        content = ""
        lines = []
    
    # Check if .venv is already present (as exact match or pattern)
    venv_present = any(
        line.strip() == ".venv" or 
        line.strip() == ".venv/" or
        line.strip() == "/.venv" or
        line.strip() == "/.venv/"
        for line in lines
    )
    
    # Add .venv if not present
    if not venv_present:
        if content and not content.endswith('\n'):
            content += '\n'
        content += '.venv\n'
        gitignore_path.write_text(content)


def main() -> None:
    import json
    import os
    from pathlib import Path
    import subprocess

    from registry import registry

    state_path = Path("/root/state.json")
    if state_path.exists():
        state = json.loads(state_path.read_text())
    else:
        state = {}

    repo_root = registry.get("ROOT", os.getenv("ROOT"))

    # Ensure .venv is in .gitignore before running git diff
    _ensure_venv_in_gitignore(repo_root)

    patch_path = Path("/root/model.patch")

    subprocess.run(
        f"git add -A && git diff --cached -- ':(exclude).gitignore' > {patch_path}",
        shell=True,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        cwd=repo_root,
    )

    patch = patch_path.read_text(errors="backslashreplace")
    state["diff"] = patch.strip()

    state_path.write_text(json.dumps(state))


def _del_diff():
    from pathlib import Path
    import json

    state_path = Path("/root/state.json")
    if state_path.exists():
        state = json.loads(state_path.read_text())
    else:
        state = {}
    state["diff"] = ""
    state_path.write_text(json.dumps(state))


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        _del_diff()